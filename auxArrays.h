struct auxArrays
{
	double A[NVIEWS+1][3][NPOINTS];
	double h[2][5];
	double B[9][10];
	double F[9][9];
	double p[22];

	void trans(const double [NVIEWS][3][NPOINTS]);
	void getB();
	void getF();
	void decicPoly();
	void itrans(double [NVIEWS1][12]);
};



// transform initial image points so that q[j][0][0]=q[j][1][0]=q[j][0][1]=0 for j = 0,1
void auxArrays::trans(const double q[NVIEWS][3][NPOINTS])
{
	iniPerm(q,A);

	for (int j=0; j<2; ++j)
	{
		// 1st Householder vector
		h[j][0]=A[j][0][0];
		h[j][1]=A[j][1][0];
		double t=h[j][0]*h[j][0]+h[j][1]*h[j][1];
		h[j][2]=(A[j][2][0]>0)? A[j][2][0]-sqrt(t+A[j][2][0]*A[j][2][0]):A[j][2][0]+sqrt(t+A[j][2][0]*A[j][2][0]);
		double beta=2./(t+h[j][2]*h[j][2]);
		double w=beta*(A[j][0][0]*h[j][0]+A[j][1][0]*h[j][1]+A[j][2][0]*h[j][2]);
		A[j][0][0]=A[j][1][0]=0.;
		A[j][2][0]-=h[j][2]*w;
		for (int k=1; k<NPOINTS; ++k)
		{
			const double w=beta*(A[j][0][k]*h[j][0]+A[j][1][k]*h[j][1]+A[j][2][k]*h[j][2]);
			A[j][0][k]=h[j][0]*w-A[j][0][k];
			A[j][1][k]=h[j][1]*w-A[j][1][k];
			A[j][2][k]-=h[j][2]*w;
		}
		double fac=sqrt(beta);
		h[j][0]*=fac;
		h[j][1]*=fac;
		h[j][2]*=fac;

		// 2nd Householder vector
		h[j][3]=A[j][0][1];
		t=h[j][3]*h[j][3];
		h[j][4]=(A[j][1][1]>0)? A[j][1][1]+sqrt(t+A[j][1][1]*A[j][1][1]):A[j][1][1]-sqrt(t+A[j][1][1]*A[j][1][1]);
		beta=2./(t+h[j][4]*h[j][4]);
		w=beta*(A[j][0][1]*h[j][3]+A[j][1][1]*h[j][4]);
		A[j][0][1]=0.;
		A[j][1][1]=h[j][4]*w-A[j][1][1];
		for (int k=2; k<NPOINTS; ++k)
		{
			const double w=beta*(A[j][0][k]*h[j][3]+A[j][1][k]*h[j][4]);
			A[j][0][k]=h[j][3]*w-A[j][0][k];
			A[j][1][k]=h[j][4]*w-A[j][1][k];
		}
		fac=sqrt(beta);
		h[j][3]*=fac;
		h[j][4]*=fac;
	}
}



// X = (u^2, uv, uw, v^2, vw, w^2, u, v, w, 1)
void auxArrays::getB()
{
	// first row of matrix B, undefined entries are zeroes
	const double y1z2=A[0][1][1]*A[1][2][1], z1y2=A[0][2][1]*A[1][1][1];
	const double dz2=2.*A[1][2][1], dy2=2.*A[1][1][1], dy1y2=dy2*A[0][1][1], dz1z2=dz2*A[0][2][1];
	B[0][0]=z1y2-y1z2;
	B[0][3]=y1z2+z1y2;
	B[0][4]=dz1z2-dy1y2;
	B[0][5]=-B[0][3];
	B[0][6]=dy1y2+dz1z2;
	B[0][9]=-B[0][0];

	B[1][1]=B[1][8]=-dz2*A[0][1][1];
	B[1][2]=-dz2*A[0][2][1];
	B[1][7]=-B[1][2];

	B[2][1]=B[2][8]=dy2*A[0][1][1];
	B[2][2]=dy2*A[0][2][1];
	B[2][7]=-B[2][2];

	for (int i=2; i<NPOINTS; ++i)
	{ // last two rows of matrix B
		const int i0=3*(i-1), i1=i0+1, i2=i0+2;
		const double dx1x2=2.*A[0][0][i]*A[1][0][i], x1y2=A[0][0][i]*A[1][1][i], x1z2=A[0][0][i]*A[1][2][i];
		const double y1x2=A[0][1][i]*A[1][0][i], dy1y2=2.*A[0][1][i]*A[1][1][i], y1z2=A[0][1][i]*A[1][2][i];
		const double z1x2=A[0][2][i]*A[1][0][i], z1y2=A[0][2][i]*A[1][1][i], dz1z2=2.*A[0][2][i]*A[1][2][i];
		B[i0][0]=z1y2-y1z2;
		B[i0][1]=2.*x1z2;
		B[i0][2]=B[i0][7]=-2.*x1y2;
		B[i0][3]=z1y2+y1z2;
		B[i0][4]=dz1z2-dy1y2;
		B[i0][5]=-B[i0][3];
		B[i0][6]=dz1z2+dy1y2;
		B[i0][8]=-B[i0][1];
		B[i0][9]=-B[i0][0];

		B[i1][0]=-x1z2-z1x2;
		B[i1][1]=B[i1][8]=-2.*y1z2;
		B[i1][2]=dx1x2-dz1z2;
		B[i1][3]=x1z2-z1x2;
		B[i1][4]=2.*y1x2;
		B[i1][5]=-B[i1][0];
		B[i1][6]=-B[i1][4];
		B[i1][7]=dx1x2+dz1z2;
		B[i1][9]=-B[i1][3];

		B[i2][0]=x1y2+y1x2;
		B[i2][1]=dy1y2-dx1x2;
		B[i2][2]=2.*z1y2;
		B[i2][3]=-B[i2][0];
		B[i2][4]=B[i2][6]=-2.*z1x2;
		B[i2][5]=y1x2-x1y2;
		B[i2][7]=-B[i2][2];
		B[i2][8]=dy1y2+dx1x2;
		B[i2][9]=-B[i2][5];
	}
}



// X = (u^2s^3w, u^2s^3, u^2s^2w, u^2s^2, u^2sw, u^2s, u^2w, u^2, us^2w^2, us^2w, usw^2, us^2, usw, uw^2, us, uw, u, sw^3, sw^2, w^3, sw, w^2, s, w, 1)
void auxArrays::getF()
{
	for (int i=0; i<6; i+=3)
	{ // first two rows of matrix F, undefined entries are zeroes
		const int i1=i+1, i2=i+2, k0=i+3, k1=i+4, k2=i+5;
		F[i][1]=-B[0][3]*B[k2][3];
		F[i][2]=(B[0][3]+B[1][1])*B[k2][3]-B[2][1]*B[k1][3];
		F[i][3]=B[2][1]*B[k0][3]-B[0][3]*B[k2][1];
		F[i][4]=B[0][0]*B[k2][1]-B[2][1]*B[k0][0];
		F[i][5]=(B[1][1]-B[0][0])*B[k2][0]-B[2][1]*B[k1][0];
		F[i][6]=B[0][0]*B[k2][0];

		F[i1][1]=(B[1][7]-B[0][4])*B[k2][3]-B[0][3]*B[k2][4]-B[2][7]*B[k1][3];
		F[i1][2]=(B[0][4]+B[1][2])*B[k2][5]+B[0][5]*B[k2][4]-B[2][2]*B[k1][5];
		F[i1][3]=B[2][7]*B[k0][3]-B[0][3]*B[k2][7];
		F[i1][4]=-B[0][0]*(B[k2][2]-B[k2][7])-B[2][2]*(B[k1][1]-B[k0][0])-B[2][1]*(B[k1][2]+B[k0][6])+(B[1][2]+B[0][6])*B[k2][1]+B[1][1]*B[k2][2]-B[2][7]*B[k0][0];
		F[i1][5]=B[0][5]*B[k2][2]-B[2][2]*B[k0][5];
		F[i1][6]=(B[1][7]-B[0][6])*B[k2][9]-B[0][9]*B[k2][6]-B[2][7]*B[k1][9];
		F[i1][7]=(B[0][6]+B[1][2])*B[k2][0]+B[0][0]*B[k2][6]-B[2][2]*B[k1][0];

		F[i2][1]=(B[1][8]-B[0][5])*B[k2][5]-B[2][8]*B[k1][5];
		F[i2][2]=B[0][5]*B[k2][5];
		F[i2][3]=B[2][8]*B[k0][9]-B[0][9]*B[k2][8];
		F[i2][4]=B[0][5]*B[k2][8]-B[2][8]*B[k0][5];
		F[i2][5]=-B[0][9]*B[k2][9];
		F[i2][6]=(B[0][9]+B[1][8])*B[k2][9]-B[2][8]*B[k1][9];
	}

	// last row of matrix F
	F[6][0]=B[4][3]*B[8][3]-B[5][3]*B[7][3];
	F[6][1]=B[5][3]*B[6][3]-B[3][3]*B[8][3];
	F[6][2]=(B[3][3]+B[4][1])*B[8][3]+B[4][3]*B[8][1]-B[5][1]*B[7][3]-B[5][3]*(B[6][3]+B[7][1]);
	F[6][3]=(B[4][3]-B[3][1])*B[8][3]+B[5][1]*B[6][3]-B[3][3]*B[8][1]+B[5][3]*(B[6][1]-B[7][3]);
	F[6][4]=(B[3][1]+B[4][0])*B[8][0]+B[3][0]*B[8][1]-B[5][1]*B[6][0]-B[5][0]*(B[6][1]+B[7][0]);
	F[6][5]=(B[4][1]-B[3][0])*B[8][0]+B[4][0]*B[8][1]-B[5][1]*B[7][0]+B[5][0]*(B[6][0]-B[7][1]);
	F[6][6]=B[3][0]*B[8][0]-B[5][0]*B[6][0];
	F[6][7]=B[4][0]*B[8][0]-B[5][0]*B[7][0];

	F[7][0]=B[4][3]*B[8][4]-B[5][4]*B[7][3]+B[4][4]*B[8][3]-B[5][3]*B[7][4];
	F[7][1]=(B[4][7]-B[3][4])*B[8][3]+B[5][4]*B[6][3]-B[3][3]*B[8][4]+B[4][3]*B[8][7]-B[5][7]*B[7][3]+B[5][3]*(B[6][4]-B[7][7]);
	F[7][2]=(B[3][4]+B[4][2])*B[8][5]+B[3][5]*B[8][4]-B[5][4]*B[6][5]+B[4][5]*B[8][2]-B[5][2]*B[7][5]-B[5][5]*(B[6][4]+B[7][2]);
	F[7][3]=B[5][7]*B[6][3]-B[3][3]*B[8][7]+B[5][3]*B[6][7]-B[3][7]*B[8][3];
	F[7][4]=(B[4][4]+B[4][6]-B[3][2]+B[3][7])*B[8][0]-B[5][0]*(B[7][6]-B[6][2]+B[6][7]+B[7][4])-B[3][0]*(B[8][2]-B[8][7])-B[5][6]*(B[6][1]+B[7][0])+B[4][0]*(B[8][4]+B[8][6])-B[5][2]*(B[7][1]-B[6][0])-B[5][1]*(B[7][2]+B[6][6])+(B[4][2]+B[3][6])*B[8][1]+B[4][1]*B[8][2]-B[5][4]*B[7][0]-B[5][7]*B[6][0]+B[3][1]*B[8][6];
	F[7][5]=B[3][2]*B[8][5]-B[5][5]*B[6][2]+B[3][5]*B[8][2]-B[5][2]*B[6][5];
	F[7][6]=(B[4][7]-B[3][6])*B[8][9]+B[5][6]*B[6][9]-B[3][9]*B[8][6]+B[4][9]*B[8][7]-B[5][7]*B[7][9]+B[5][9]*(B[6][6]-B[7][7]);
	F[7][7]=(B[3][6]+B[4][2])*B[8][0]+B[3][0]*B[8][6]-B[5][6]*B[6][0]+B[4][0]*B[8][2]-B[5][2]*B[7][0]-B[5][0]*(B[6][6]+B[7][2]);
	F[7][8]=B[4][0]*B[8][6]-B[5][6]*B[7][0]+B[4][6]*B[8][0]-B[5][0]*B[7][6];

	F[8][0]=B[4][5]*B[8][5]-B[5][5]*B[7][5];
	F[8][1]=(B[4][8]-B[3][5])*B[8][5]+B[4][5]*B[8][8]-B[5][8]*B[7][5]+B[5][5]*(B[6][5]-B[7][8]);
	F[8][2]=B[3][5]*B[8][5]-B[5][5]*B[6][5];
	F[8][3]=(B[4][9]-B[3][8])*B[8][9]+B[5][8]*B[6][9]-B[3][9]*B[8][8]+B[5][9]*(B[6][8]-B[7][9]);
	F[8][4]=(B[3][8]+B[4][5])*B[8][5]+B[3][5]*B[8][8]-B[5][8]*B[6][5]-B[5][5]*(B[6][8]+B[7][5]);
	F[8][5]=B[5][9]*B[6][9]-B[3][9]*B[8][9];
	F[8][6]=(B[3][9]+B[4][8])*B[8][9]+B[4][9]*B[8][8]-B[5][8]*B[7][9]-B[5][9]*(B[6][9]+B[7][8]);
	F[8][7]=B[4][9]*B[8][9]-B[5][9]*B[7][9];
}



// decic polynomial in 2 variables, it has 43 terms, but due to the symmetry we only need half of them
void auxArrays::decicPoly()
{
	double M[3][19]; // 2x2 minors, undefined entries are not required
	// X[0] = (w^3, sw^3, s^2w^3, s^3w^3, w^2, sw^2, s^2w^2, s^3w^2, s^4w^2, sw, s^2w, s^3w, s^4w, s^5w, s^2, s^3, s^4, s^5)
	M[0][0]=F[0][6]*F[4][5]-F[1][5]*F[3][6];
	M[0][1]=F[0][4]*F[4][5]+F[0][6]*F[4][2]-F[1][2]*F[3][6]-F[1][5]*F[3][4];
	M[0][2]=F[0][2]*F[4][5]+F[0][4]*F[4][2]-F[1][2]*F[3][4]-F[1][5]*F[3][2];
	M[0][3]=F[0][2]*F[4][2]-F[1][2]*F[3][2];
	M[0][4]=F[0][6]*F[4][7]-F[1][7]*F[3][6];
	M[0][5]=F[0][4]*F[4][7]+F[0][5]*F[4][5]+F[0][6]*F[4][4]-F[1][4]*F[3][6]-F[1][5]*F[3][5]-F[1][7]*F[3][4];
	M[0][6]=F[0][2]*F[4][7]+F[0][3]*F[4][5]+F[0][4]*F[4][4]+F[0][5]*F[4][2]+F[0][6]*F[4][1]-F[1][1]*F[3][6]-F[1][2]*F[3][5]-F[1][4]*F[3][4]-F[1][5]*F[3][3]-F[1][7]*F[3][2];
	M[0][7]=F[0][1]*F[4][5]+F[0][2]*F[4][4]+F[0][3]*F[4][2]+F[0][4]*F[4][1]-F[1][1]*F[3][4]-F[1][2]*F[3][3]-F[1][4]*F[3][2]-F[1][5]*F[3][1];
	M[0][8]=F[0][1]*F[4][2]+F[0][2]*F[4][1]-F[1][1]*F[3][2]-F[1][2]*F[3][1];
	M[0][9]=F[0][5]*F[4][7]+F[0][6]*F[4][6]-F[1][6]*F[3][6]-F[1][7]*F[3][5];
	M[0][10]=F[0][3]*F[4][7]+F[0][4]*F[4][6]+F[0][5]*F[4][4]+F[0][6]*F[4][3]-F[1][3]*F[3][6]-F[1][4]*F[3][5]-F[1][6]*F[3][4]-F[1][7]*F[3][3];
	M[0][11]=F[0][1]*F[4][7]+F[0][2]*F[4][6]+F[0][3]*F[4][4]+F[0][4]*F[4][3]+F[0][5]*F[4][1]-F[1][1]*F[3][5]-F[1][3]*F[3][4]-F[1][4]*F[3][3]-F[1][6]*F[3][2]-F[1][7]*F[3][1];
	M[0][12]=F[0][1]*F[4][4]+F[0][2]*F[4][3]+F[0][3]*F[4][1]-F[1][1]*F[3][3]-F[1][3]*F[3][2]-F[1][4]*F[3][1];
	M[0][13]=F[0][1]*F[4][1]-F[1][1]*F[3][1];
	M[0][14]=F[0][5]*F[4][6]-F[1][6]*F[3][5];
	M[0][15]=F[0][3]*F[4][6]+F[0][5]*F[4][3]-F[1][3]*F[3][5]-F[1][6]*F[3][3];
	M[0][16]=F[0][1]*F[4][6]+F[0][3]*F[4][3]-F[1][3]*F[3][3]-F[1][6]*F[3][1];
	M[0][17]=F[0][1]*F[4][3]-F[1][3]*F[3][1];

	// X[1] = (w^4, sw^4, s^2w^4, w^3, sw^3, s^2w^3, s^3w^3, w^2, sw^2, s^2w^2, s^3w^2, s^4w^2, sw, s^2w, s^3w, s^4w, s^2, s^3, s^4)
	M[1][3]=F[0][6]*F[5][4]-F[2][4]*F[3][6];
	M[1][4]=F[0][4]*F[5][4]+F[0][5]*F[5][2]+F[0][6]*F[5][1]-F[2][1]*F[3][6]-F[2][2]*F[3][5]-F[2][4]*F[3][4];
	M[1][5]=F[0][2]*F[5][4]+F[0][3]*F[5][2]+F[0][4]*F[5][1]-F[2][1]*F[3][4]-F[2][2]*F[3][3]-F[2][4]*F[3][2];
	M[1][6]=F[0][1]*F[5][2]+F[0][2]*F[5][1]-F[2][1]*F[3][2]-F[2][2]*F[3][1];
	M[1][7]=F[0][6]*F[5][6]-F[2][6]*F[3][6];
	M[1][8]=F[0][4]*F[5][6]+F[0][5]*F[5][4]+F[0][6]*F[5][3]-F[2][3]*F[3][6]-F[2][4]*F[3][5]-F[2][6]*F[3][4];
	M[1][9]=F[0][2]*F[5][6]+F[0][3]*F[5][4]+F[0][4]*F[5][3]+F[0][5]*F[5][1]-F[2][1]*F[3][5]-F[2][3]*F[3][4]-F[2][4]*F[3][3]-F[2][6]*F[3][2];
	M[1][10]=F[0][1]*F[5][4]+F[0][2]*F[5][3]+F[0][3]*F[5][1]-F[2][1]*F[3][3]-F[2][3]*F[3][2]-F[2][4]*F[3][1];
	M[1][11]=F[0][1]*F[5][1]-F[2][1]*F[3][1];
	M[1][12]=F[0][5]*F[5][6]+F[0][6]*F[5][5]-F[2][5]*F[3][6]-F[2][6]*F[3][5];
	M[1][13]=F[0][3]*F[5][6]+F[0][4]*F[5][5]+F[0][5]*F[5][3]-F[2][3]*F[3][5]-F[2][5]*F[3][4]-F[2][6]*F[3][3];
	M[1][14]=F[0][1]*F[5][6]+F[0][2]*F[5][5]+F[0][3]*F[5][3]-F[2][3]*F[3][3]-F[2][5]*F[3][2]-F[2][6]*F[3][1];
	M[1][15]=F[0][1]*F[5][3]-F[2][3]*F[3][1];
	M[1][16]=F[0][5]*F[5][5]-F[2][5]*F[3][5];
	M[1][17]=F[0][3]*F[5][5]-F[2][5]*F[3][3];
	M[1][18]=F[0][1]*F[5][5]-F[2][5]*F[3][1];

	// X[2] = (w^5, sw^5, w^4, sw^4, s^2w^4, w^3, sw^3, s^2w^3, s^3w^3, w^2, sw^2, s^2w^2, s^3w^2, sw, s^2w, s^3w, s^2, s^3)
	M[2][5]=F[1][5]*F[5][6]+F[1][7]*F[5][4]-F[2][4]*F[4][7]-F[2][6]*F[4][5];
	M[2][6]=F[1][2]*F[5][6]+F[1][4]*F[5][4]+F[1][5]*F[5][3]+F[1][6]*F[5][2]+F[1][7]*F[5][1]-F[2][1]*F[4][7]-F[2][2]*F[4][6]-F[2][3]*F[4][5]-F[2][4]*F[4][4]-F[2][6]*F[4][2];
	M[2][7]=F[1][1]*F[5][4]+F[1][2]*F[5][3]+F[1][3]*F[5][2]+F[1][4]*F[5][1]-F[2][1]*F[4][4]-F[2][2]*F[4][3]-F[2][3]*F[4][2]-F[2][4]*F[4][1];
	M[2][8]=F[1][1]*F[5][1]-F[2][1]*F[4][1];
	M[2][9]=F[1][7]*F[5][6]-F[2][6]*F[4][7];
	M[2][10]=F[1][4]*F[5][6]+F[1][5]*F[5][5]+F[1][6]*F[5][4]+F[1][7]*F[5][3]-F[2][3]*F[4][7]-F[2][4]*F[4][6]-F[2][5]*F[4][5]-F[2][6]*F[4][4];
	M[2][11]=F[1][1]*F[5][6]+F[1][2]*F[5][5]+F[1][3]*F[5][4]+F[1][4]*F[5][3]+F[1][6]*F[5][1]-F[2][1]*F[4][6]-F[2][3]*F[4][4]-F[2][4]*F[4][3]-F[2][5]*F[4][2]-F[2][6]*F[4][1];
	M[2][12]=F[1][1]*F[5][3]+F[1][3]*F[5][1]-F[2][1]*F[4][3]-F[2][3]*F[4][1];
	M[2][13]=F[1][6]*F[5][6]+F[1][7]*F[5][5]-F[2][5]*F[4][7]-F[2][6]*F[4][6];
	M[2][14]=F[1][3]*F[5][6]+F[1][4]*F[5][5]+F[1][6]*F[5][3]-F[2][3]*F[4][6]-F[2][5]*F[4][4]-F[2][6]*F[4][3];
	M[2][15]=F[1][1]*F[5][5]+F[1][3]*F[5][3]-F[2][3]*F[4][3]-F[2][5]*F[4][1];
	M[2][16]=F[1][6]*F[5][5]-F[2][5]*F[4][6];
	M[2][17]=F[1][3]*F[5][5]-F[2][5]*F[4][3];

	// X = (s^2, s^3, s^4, s^5, s^6, sw, s^2w, s^3w, s^4w, s^5w, s^6w, w^2, sw^2, s^2w^2, s^3w^2, s^4w^2, s^5w^2, s^6w^2, w^3, sw^3, s^2w^3, s^3w^3)
	p[0]=M[0][14]*F[8][7]-M[1][16]*F[7][8]+M[2][16]*F[6][7];
	p[1]=M[0][14]*F[8][5]+M[0][15]*F[8][7]-M[1][16]*F[7][6]-M[1][17]*F[7][8]+M[2][16]*F[6][5]+M[2][17]*F[6][7];
	p[2]=M[0][15]*F[8][5]+M[0][16]*F[8][7]-M[1][16]*F[7][3]-M[1][17]*F[7][6]-M[1][18]*F[7][8]+M[2][16]*F[6][3]+M[2][17]*F[6][5];
	p[3]=M[0][16]*F[8][5]+M[0][17]*F[8][7]-M[1][17]*F[7][3]-M[1][18]*F[7][6]+M[2][16]*F[6][1]+M[2][17]*F[6][3];
	p[4]=M[0][17]*F[8][5]-M[1][18]*F[7][3]+M[2][17]*F[6][1];
	p[5]=M[0][9]*F[8][7]-M[1][12]*F[7][8]+M[2][13]*F[6][7];
	p[6]=M[0][9]*F[8][5]+M[0][10]*F[8][7]+M[0][14]*F[8][6]-M[1][12]*F[7][6]-M[1][13]*F[7][8]-M[1][16]*F[7][7]+M[2][13]*F[6][5]+M[2][14]*F[6][7]+M[2][16]*F[6][6];
	p[7]=M[0][10]*F[8][5]+M[0][11]*F[8][7]+M[0][14]*F[8][3]+M[0][15]*F[8][6]-M[1][12]*F[7][3]-M[1][13]*F[7][6]-M[1][14]*F[7][8]-M[1][16]*F[7][4]-M[1][17]*F[7][7]+M[2][13]*F[6][3]+M[2][14]*F[6][5]+M[2][15]*F[6][7]+M[2][16]*F[6][4]+M[2][17]*F[6][6];
	p[8]=M[0][11]*F[8][5]+M[0][12]*F[8][7]+M[0][15]*F[8][3]+M[0][16]*F[8][6]-M[1][13]*F[7][3]-M[1][14]*F[7][6]-M[1][15]*F[7][8]-M[1][16]*F[7][1]-M[1][17]*F[7][4]-M[1][18]*F[7][7]+M[2][13]*F[6][1]+M[2][14]*F[6][3]+M[2][15]*F[6][5]+M[2][16]*F[6][2]+M[2][17]*F[6][4];
	p[9]=M[0][12]*F[8][5]+M[0][13]*F[8][7]+M[0][16]*F[8][3]+M[0][17]*F[8][6]-M[1][14]*F[7][3]-M[1][15]*F[7][6]-M[1][17]*F[7][1]-M[1][18]*F[7][4]+M[2][14]*F[6][1]+M[2][15]*F[6][3]+M[2][16]*F[6][0]+M[2][17]*F[6][2];
	p[10]=M[0][13]*F[8][5]+M[0][17]*F[8][3]-M[1][15]*F[7][3]-M[1][18]*F[7][1]+M[2][15]*F[6][1]+M[2][17]*F[6][0];
	p[11]=M[0][4]*F[8][7]-M[1][7]*F[7][8]+M[2][9]*F[6][7];
	p[12]=M[0][4]*F[8][5]+M[0][5]*F[8][7]+M[0][9]*F[8][6]-M[1][7]*F[7][6]-M[1][8]*F[7][8]-M[1][12]*F[7][7]+M[2][9]*F[6][5]+M[2][10]*F[6][7]+M[2][13]*F[6][6];
	p[13]=M[0][5]*F[8][5]+M[0][9]*F[8][3]+M[0][6]*F[8][7]+M[0][10]*F[8][6]+M[0][14]*F[8][4]-M[1][7]*F[7][3]-M[1][8]*F[7][6]-M[1][12]*F[7][4]-M[1][9]*F[7][8]-M[1][13]*F[7][7]-M[1][16]*F[7][5]+M[2][9]*F[6][3]+M[2][10]*F[6][5]+M[2][13]*F[6][4]+M[2][11]*F[6][7]+M[2][14]*F[6][6];
	p[14]=M[0][6]*F[8][5]+M[0][10]*F[8][3]+M[0][14]*F[8][1]+M[0][7]*F[8][7]+M[0][11]*F[8][6]+M[0][15]*F[8][4]-M[1][8]*F[7][3]-M[1][12]*F[7][1]-M[1][9]*F[7][6]-M[1][13]*F[7][4]-M[1][16]*F[7][2]-M[1][10]*F[7][8]-M[1][14]*F[7][7]-M[1][17]*F[7][5]+M[2][9]*F[6][1]+M[2][10]*F[6][3]+M[2][13]*F[6][2]+M[2][11]*F[6][5]+M[2][14]*F[6][4]+M[2][12]*F[6][7]+M[2][15]*F[6][6];
	p[15]=M[0][7]*F[8][5]+M[0][11]*F[8][3]+M[0][15]*F[8][1]+M[0][8]*F[8][7]+M[0][12]*F[8][6]+M[0][16]*F[8][4]-M[1][9]*F[7][3]-M[1][13]*F[7][1]-M[1][16]*F[7][0]-M[1][10]*F[7][6]-M[1][14]*F[7][4]-M[1][17]*F[7][2]-M[1][11]*F[7][8]-M[1][15]*F[7][7]-M[1][18]*F[7][5]+M[2][10]*F[6][1]+M[2][13]*F[6][0]+M[2][11]*F[6][3]+M[2][14]*F[6][2]+M[2][12]*F[6][5]+M[2][15]*F[6][4];
	p[16]=M[0][8]*F[8][5]+M[0][12]*F[8][3]+M[0][13]*F[8][6]+M[0][16]*F[8][1]+M[0][17]*F[8][4]-M[1][10]*F[7][3]-M[1][11]*F[7][6]-M[1][14]*F[7][1]-M[1][15]*F[7][4]-M[1][17]*F[7][0]-M[1][18]*F[7][2]+M[2][11]*F[6][1]+M[2][12]*F[6][3]+M[2][14]*F[6][0]+M[2][15]*F[6][2];
	p[17]=M[0][13]*F[8][3]+M[0][17]*F[8][1]-M[1][11]*F[7][3]-M[1][15]*F[7][1]-M[1][18]*F[7][0]+M[2][12]*F[6][1]+M[2][15]*F[6][0];
	p[18]=M[0][0]*F[8][7]+M[0][4]*F[8][6]-M[1][3]*F[7][8]-M[1][7]*F[7][7]+M[2][5]*F[6][7]+M[2][9]*F[6][6];
	p[19]=M[0][0]*F[8][5]+M[0][1]*F[8][7]+M[0][4]*F[8][3]+M[0][5]*F[8][6]+M[0][9]*F[8][4]-M[1][3]*F[7][6]-M[1][4]*F[7][8]-M[1][7]*F[7][4]-M[1][8]*F[7][7]-M[1][12]*F[7][5]+M[2][5]*F[6][5]+M[2][6]*F[6][7]+M[2][9]*F[6][4]+M[2][10]*F[6][6];
	p[20]=M[0][1]*F[8][5]+M[0][5]*F[8][3]+M[0][9]*F[8][1]+M[0][2]*F[8][7]+M[0][6]*F[8][6]+M[0][10]*F[8][4]+M[0][14]*F[8][2]-M[1][3]*F[7][3]-M[1][7]*F[7][1]-M[1][4]*F[7][6]-M[1][8]*F[7][4]-M[1][12]*F[7][2]-M[1][5]*F[7][8]-M[1][9]*F[7][7]-M[1][13]*F[7][5]+M[2][5]*F[6][3]+M[2][9]*F[6][2]+M[2][6]*F[6][5]+M[2][10]*F[6][4]+M[2][7]*F[6][7]+M[2][11]*F[6][6];
	p[21]=-M[1][4]*F[7][3]-M[1][13]*F[7][2]-M[1][9]*F[7][4]-M[1][5]*F[7][6]-M[1][14]*F[7][5]-M[1][10]*F[7][7]-M[1][6]*F[7][8]+M[2][9]*F[6][0]+M[2][5]*F[6][1]+M[2][10]*F[6][2]+M[2][6]*F[6][3]+M[2][11]*F[6][4]+M[2][7]*F[6][5]+M[2][12]*F[6][6]+M[2][8]*F[6][7]+M[0][14]*F[8][0]+M[0][10]*F[8][1]+M[0][6]*F[8][3]+M[0][2]*F[8][5]+M[0][15]*F[8][2]+M[0][11]*F[8][4]+M[0][7]*F[8][6]+M[0][3]*F[8][7]-M[1][12]*F[7][0]-M[1][8]*F[7][1];
}



// inverse transform of camera matrices
void auxArrays::itrans(double Rt[NVIEWS1][12])
{
	const double g[4]={h[1][0]*Rt[0][0]+h[1][1]*Rt[0][3]+h[1][2]*Rt[0][6], h[1][0]*Rt[0][1]+h[1][1]*Rt[0][4]+h[1][2]*Rt[0][7], h[1][0]*Rt[0][2]+h[1][1]*Rt[0][5]+h[1][2]*Rt[0][8],	h[1][0]*Rt[0][9]+h[1][1]*Rt[0][10]+h[1][2]*Rt[0][11]};
	const double f[4]={h[1][3]*Rt[0][0]+h[1][4]*Rt[0][3], h[1][3]*Rt[0][1]+h[1][4]*Rt[0][4], h[1][3]*Rt[0][2]+h[1][4]*Rt[0][5], h[1][3]*Rt[0][9]+h[1][4]*Rt[0][10]};
	const double d1=h[1][0]*h[1][3]+h[1][1]*h[1][4], t0=d1*h[1][0]-h[1][3], t1=d1*h[1][1]-h[1][4], t2=d1*h[1][2];
	
	for (int i=0; i<3; ++i)
	{
		Rt[0][i]-=h[1][0]*g[i]-t0*f[i];
		Rt[0][i+3]-=h[1][1]*g[i]-t1*f[i];
		Rt[0][i+6]-=h[1][2]*g[i]-t2*f[i];
	}
	Rt[0][9]-=h[1][0]*g[3]-t0*f[3];
	Rt[0][10]-=h[1][1]*g[3]-t1*f[3];
	Rt[0][11]-=h[1][2]*g[3]-t2*f[3];
	
	const double d0=h[0][0]*h[0][3]+h[0][1]*h[0][4], t3=d0*h[0][0]-h[0][3], t4=d0*h[0][1]-h[0][4], t5=d0*h[0][2];
	for (int j=0; j<NVIEWS1; ++j)
	{
		const double g[3]={h[0][0]*Rt[j][0]+h[0][1]*Rt[j][1]+h[0][2]*Rt[j][2], h[0][0]*Rt[j][3]+h[0][1]*Rt[j][4]+h[0][2]*Rt[j][5], h[0][0]*Rt[j][6]+h[0][1]*Rt[j][7]+h[0][2]*Rt[j][8]};
		const double f[3]={h[0][3]*Rt[j][0]+h[0][4]*Rt[j][1], h[0][3]*Rt[j][3]+h[0][4]*Rt[j][4], h[0][3]*Rt[j][6]+h[0][4]*Rt[j][7]};
		
		Rt[j][0]-=h[0][0]*g[0]-t3*f[0];
		Rt[j][1]-=h[0][1]*g[0]-t4*f[0];
		Rt[j][2]-=h[0][2]*g[0]-t5*f[0];
		Rt[j][3]-=h[0][0]*g[1]-t3*f[1];
		Rt[j][4]-=h[0][1]*g[1]-t4*f[1];
		Rt[j][5]-=h[0][2]*g[1]-t5*f[1];
		Rt[j][6]-=h[0][0]*g[2]-t3*f[2];
		Rt[j][7]-=h[0][1]*g[2]-t4*f[2];
		Rt[j][8]-=h[0][2]*g[2]-t5*f[2];
	}
}